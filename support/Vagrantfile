# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# There are probably better ways to hook into "vagrant up", haven't had
# any problems with this yet, but please do contribute if you do.
if ARGV.first == "up"
  # You can use this to lock down the devbox-tools version, but
  # running "dev update" will do "git pull" in this repo.
  File.exists?("devbox-tools") || system("git clone git@github.com:joakimk/devbox-tools.git") || exit(1)
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.provider "virtualbox" do |vb|
    vb.customize [ "modifyvm", :id, "--memory", "1024" ]
  end

  config.vm.box = "ubuntu-12.04-amd64-vbox"

  # The box must have docker support. For more boxes see http://www.vagrantbox.es/.
  #
  # Also consider that many of the devbox-tools plugins have system package dependencies and may
  # need to be modified to work with other distributions.
  config.vm.box_url = "https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-12.04-amd64-vbox.box"

  user_name = ENV["USER"]
  # Optional, see below. config.ssh.username = user_name

  config.vm.provision :shell, inline: %{
    set -e

    # Optional: Setup user so that you can log in using your host system user name.
    #           If you use this, also set config.ssh.username.
    #
    #if [ ! -e /home/#{user_name} ]
    #then
    #  # Same user and group as in OSX for NFS mounts
    #  useradd #{user_name} -u 501 -g 20 -m -s /bin/bash -G sudo,admin
    #  groupmod -n #{user_name} dialout
    #  cp -rf /home/vagrant/.ssh /home/#{user_name}
    #  chown #{user_name} -R /home/#{user_name}/.ssh
    #fi

    if [ ! -e /usr/bin/docker ]
    then
      # Add docker source
      apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
      sh -c "echo deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list"

      # Install some basic tools that devbox-tools needs to bootstrap itself (adapt for your box type).
      apt-get update && apt-get install build-essential unzip git bison lxc-docker libssl-dev libyaml-dev -y
      cat /home/vagrant/.bashrc | grep devbox-tools || echo 'source /vagrant/devbox-tools/support/shell' >> /home/vagrant/.bashrc
      /vagrant/devbox-tools/support/install_dependencies
    fi

    # Make the prompt look nicer
    set +e
    cat /etc/hosts|grep devbox > /dev/null

    if [ $? -eq 1 ]
    then
      set -e
      echo "devbox" > /etc/hostname
      echo "127.0.1.1 devbox" >> /etc/hosts
      /etc/init.d/hostname restart
    fi
  }

  # Setup a synced folder to access your projects. NFS is much faster than the default method.
  # config.vm.synced_folder "/projects", "/path/to/your/projects", :nfs => true

  # To be able to access web servers and such running inside the VM.
  config.vm.network :private_network, ip: "10.11.12.13"

  # This can be removed, used for devbox-tools's integration tests
  # TODO: Use templating
  if ENV["RUNNING_TEST"]
    config.vm.synced_folder "../..", "/devbox-tools"
  end

  # Kept the original vagrant docs below:

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
